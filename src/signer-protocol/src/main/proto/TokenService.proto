syntax = "proto3";

option java_multiple_files = true;

import "CommonMessages.proto";
import "Tokens.proto";
import "TokenStatusInfo.proto";

package org.niis.xroad.signer.proto;

service TokenService {
  rpc GetTokenById (GetTokenByIdReq) returns (TokenInfoProto) {}

  rpc GetTokenByKey (GetTokenByKeyIdReq) returns (TokenInfoProto) {}

  rpc GetTokenAndKeyIdByCertRequestId (GetTokenByCertRequestIdReq) returns (TokenInfoAndKeyIdProto) {}

  rpc GetTokenAndKeyIdByCertHash (GetTokenByCertHashReq) returns (TokenInfoAndKeyIdProto) {}

  rpc ListTokens (Empty) returns (ListTokensResp) {}

  rpc ActivateToken (ActivateTokenReq) returns (Empty) {}

  rpc SetTokenFriendlyName (SetTokenFriendlyNameReq) returns (Empty) {}

  rpc GetTokenBatchSigningEnabled(GetTokenBatchSigningEnabledReq) returns (GetTokenBatchSigningEnabledResp){}

  rpc InitSoftwareToken(InitSoftwareTokenReq) returns (Empty) {}

  rpc UpdateSoftwareTokenPin(UpdateSoftwareTokenPinReq) returns (Empty) {}

}

message ListTokensResp {
  repeated TokenInfoProto tokens = 1;
}

message ActivateTokenReq{
  string tokenId = 1;
  bool  activate = 2;
}

message GetTokenByIdReq {
  string tokenId = 1;
}

message GetTokenByKeyIdReq {
  string keyId = 1;
}

message GetTokenByCertRequestIdReq {
  string certRequestId = 1;
}

message GetTokenByCertHashReq {
  string certHash = 1;
}

message SetTokenFriendlyNameReq {
  string tokenId = 1;
  string friendlyName = 2;
}

message GetTokenBatchSigningEnabledReq {
  string keyId = 1;
}

message GetTokenBatchSigningEnabledResp {
  bool batchingSigningEnabled = 1;
}

message InitSoftwareTokenReq {
  string pin = 1;
}

message UpdateSoftwareTokenPinReq {
  string tokenId = 1;
  string oldPin = 2;
  string newPin = 3;
}
