syntax = "proto3";

option java_multiple_files = true;

import "CommonMessages.proto";
import "Tokens.proto";
import "TokenStatusInfo.proto";

package org.niis.xroad.signer.proto;

service KeyService {
  rpc GenerateKey (GenerateKeyReq) returns (KeyInfoProto) {}

  rpc SetKeyFriendlyName (SetKeyFriendlyNameReq) returns (Empty) {}

  rpc GetKeyIdForCertHash (GetKeyIdForCertHashReq) returns (GetKeyIdForCertHashResp) {}

  rpc GetSignMechanism (GetSignMechanismReq) returns (GetSignMechanismResp) {}

  rpc Sign(SignReq) returns (SignResp) {}

  rpc SignCertificate(SignCertificateReq) returns (SignCertificateResp) {}

  rpc DeleteKey (DeleteKeyReq) returns (Empty) {}

  rpc GetAuthKey (GetAuthKeyReq) returns (AuthKeyInfoProto) {}
}

message GetKeyIdForCertHashReq {
  string cert_hash = 1;
}

message GetKeyIdForCertHashResp {
  string key_id = 1;
  string sign_mechanism_name = 2;
}

message SetKeyFriendlyNameReq {
  string key_id = 1;
  string friendly_name = 2;
}


message GetSignMechanismReq {
  string key_id = 1;
}

message GetSignMechanismResp {
  string sign_mechanism_name = 1;
}

message SignReq {
  string key_id = 1;
  string signature_algorithm_id = 2;
  bytes digest = 3;
}

message SignResp {
  bytes signature = 1;
}

message SignCertificateReq {
  string key_id = 1;
  string signature_algorithm_id = 2;
  string subject_name = 3;
  bytes public_key = 4;
}

message SignCertificateResp {
  bytes certificate_chain = 1;
}

message DeleteKeyReq {
  string key_id = 1;
  bool delete_from_device = 2;
}

message GenerateKeyReq {
  string token_id = 1;
  string key_label = 2;
}

message GetAuthKeyReq {
  SecurityServerIdProto security_server = 1;
}

message AuthKeyInfoProto {
  string alias = 1;
  string key_store_file_name = 2;
  string password = 3;
  CertificateInfoProto cert = 4;
}
