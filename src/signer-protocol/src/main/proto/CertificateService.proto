syntax = "proto3";

option java_multiple_files = true;

import "CommonMessages.proto";
import "Tokens.proto";
import "TokenStatusInfo.proto";

package org.niis.xroad.signer.proto;

service CertificateService {
  rpc ActivateCert (ActivateCertRequest) returns (Empty) {}

  rpc GetCertificateInfoForHash (GetCertificateInfoForHashRequest) returns (GetCertificateInfoResponse) {}

  rpc GetMemberCerts (GetMemberCertsRequest) returns (GetMemberCertsResponse) {}

  rpc SetCertStatus (SetCertStatusRequest) returns (Empty) {}

  rpc RegenerateCertReq (RegenerateCertReqRequest) returns (RegenerateCertReqResponse) {}
}

message GetCertificateInfoForHashRequest {
  string certHash = 1;
}

message GetCertificateInfoResponse {
  CertificateInfoProto certificateInfo = 1;
}

message ActivateCertRequest {
  string certIdOrHash = 1;
  bool  active = 2;
}

message SetCertStatusRequest{
  string certId = 1;
  string status = 2;
}

message GetMemberCertsRequest{
  ClientIdProto memberId = 1;
}

message GetMemberCertsResponse{
  repeated CertificateInfoProto certs = 1;
}

message RegenerateCertReqRequest {//TODO:grpc consider swapping req and request places..
  string certRequestId = 1;
  CertificateRequestFormat format = 2;
}

message RegenerateCertReqResponse {
  string certReqId = 1;
  bytes certRequest = 2;
  CertificateRequestFormat format = 3;
  ClientIdProto memberId = 4;
  KeyUsageInfo keyUsage = 5;
}

/** Specifies the cert request format to return. */
enum CertificateRequestFormat {
  PEM = 0;
  DER = 1;
}
