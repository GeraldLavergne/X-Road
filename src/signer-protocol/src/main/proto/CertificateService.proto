syntax = "proto3";

option java_multiple_files = true;

import "CommonMessages.proto";
import "Tokens.proto";
import "TokenStatusInfo.proto";

package org.niis.xroad.signer.proto;

service CertificateService {
  rpc ActivateCert (ActivateCertReq) returns (Empty) {}

  rpc GetCertificateInfoForHash (GetCertificateInfoForHashReq) returns (GetCertificateInfoResp) {}

  rpc GetMemberCerts (GetMemberCertsReq) returns (GetMemberCertsResp) {}

  rpc SetCertStatus (SetCertStatusReq) returns (Empty) {}

  rpc GenerateCertRequest (GenerateCertRequestReq) returns (GenerateCertRequestResp) {}

  rpc RegenerateCertRequest (RegenerateCertRequestReq) returns (RegenerateCertRequestResp) {}

  rpc DeleteCert (DeleteCertReq) returns (Empty) {}

  rpc DeleteCertRequest (DeleteCertRequestReq) returns (Empty) {}

  rpc ImportCert (ImportCertReq) returns (ImportCertResp) {}

  rpc GenerateSelfSignedCert (GenerateSelfSignedCertReq) returns (GenerateSelfSignedCertResp) {}
}

message GetCertificateInfoForHashReq {
  string certHash = 1;
}

message GetCertificateInfoResp {
  CertificateInfoProto certificateInfo = 1;
}

message ActivateCertReq {
  string certIdOrHash = 1;
  bool  active = 2;
}

message SetCertStatusReq{
  string certId = 1;
  string status = 2;
}

message GetMemberCertsReq{
  ClientIdProto memberId = 1;
}

message GetMemberCertsResp{
  repeated CertificateInfoProto certs = 1;
}

message RegenerateCertRequestReq {
  string certRequestId = 1;
  CertificateRequestFormat format = 2;
}

message RegenerateCertRequestResp {
  string certReqId = 1;
  bytes certRequest = 2;
  CertificateRequestFormat format = 3;
  ClientIdProto memberId = 4;
  KeyUsageInfo keyUsage = 5;
}

/** Specifies the cert request format to return. */
enum CertificateRequestFormat {
  PEM = 0;
  DER = 1;
}

message DeleteCertReq {
  string certId = 1;
}

message DeleteCertRequestReq {
  string certRequestId = 1;
}

message ImportCertReq {
  bytes certData = 1;
  string initialStatus = 2;
  ClientIdProto memberId = 3;
}

message ImportCertResp {
  string keyId = 1;
}

message GenerateSelfSignedCertReq {
  string keyId = 1;
  string commonName = 2;
  int64 dateNotBefore = 3;
  int64 dateNotAfter = 4;
  KeyUsageInfo keyUsage = 5;
  ClientIdProto memberId = 6;
}

message GenerateSelfSignedCertResp {
  bytes certificateBytes = 1;
}

message GenerateCertRequestReq {
  string keyId = 1;
  ClientIdProto memberId = 2;
  KeyUsageInfo keyUsage = 3;
  string subjectName = 4;
  CertificateRequestFormat format = 5;
}

message GenerateCertRequestResp {
  string certReqId = 1;
  bytes certRequest = 2;
  CertificateRequestFormat format = 3;
}
