pipeline {
    agent any
    parameters {
        string(description: "Deployment template path", name: "DEPLOYMENT_PATH", defaultValue:  "${params?.DEPLOYMENT_PATH}" )
        string(description: "Number of deployment replicas", name: "NUMBER_REPLICAS", defaultValue: 1 )
        string(description: "External database host", name: "XROAD_DB_HOST", defaultValue: "${params?.XROAD_DB_HOST}")
        string(description: "External database port", name: "XROAD_DB_PORT", defaultValue: "${params?.XROAD_DB_PORT}")
        string(description: "External database password", name: "XROAD_DB_PWD", defaultValue: "${params?.XROAD_DB_PWD}")
        string(description: "Log level (INFO, WARNING, ERROR, ALL, DEBUG, TRACE, OFF)", name: "XROAD_LOG_LEVEL", defaultValue: "${params?.XROAD_LOG_LEVEL}")
    }
    stages {
        stage('Clone X-Road Security Server Sidecar repository') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: 'master']],
                    doGenerateSubmoduleConfigurations: false,
                    gitTool: 'Default',
                    userRemoteConfigs: [
                        [
                            url: 'https://github.com/nordic-institute/X-Road-Security-Server-sidecar.git',
                            refspec: '+refs/heads/*:refs/remotes/origin/* +refs/pull/*/head:refs/remotes/origin/pull/*'
                        ]
                    ]
                ])
            }
        }
        stage('Build X-Road Security Server Sidecar image') {
            steps {
                sh '${DEPLOYMENT_PATH} ${NUMBER_REPLICAS} ${XROAD_DB_HOST} ${XROAD_DB_PORT} ${XROAD_DB_PWD} ${XROAD_LOG_LEVEL}'
            }
        }
        
        stage('Rollout status') {
            steps {
                sh 'kubectl rollout status deployment.v1.apps/security-server-sidecar'
            }
        }
        stage('Test') {
            steps {
                retry (5) {
                    sleep(time: 20, unit: 'SECONDS')
                    script {
                        def response = sh(script: 'curl --write-out %{http_code} --silent --output /dev/null --insecure https://localhost:4100', returnStdout: true)
                        if(response == '302') {
                            echo '========> X-Road Security Server Sidecar is successfully running'
                            currentBuild.result = 'SUCCESS'
                        } else {
                            error("========> X-Road Security Server Sidecar returned " + response + " . Try again in 20s")
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            sh 'docker rm -f sss-${IMAGE_TAG} || true'
        }
    }
}