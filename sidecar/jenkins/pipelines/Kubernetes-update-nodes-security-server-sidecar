pipeline {
    agent any
    parameters {
        string(description: "Nodes max size", name: "MAX_SIZE", defaultValue: "${params?.MAX_SIZE}")
        string(description: "Nodes min size", name: "MIN_SIZE", defaultValue: "${params?.MIN_SIZE}")
        string(description: "Nodes desired size", name: "DESIRED_SIZE", defaultValue: "${params?.DESIRED_SIZE}")
        string(description: "Name of the node group", name: "NODE_GROUP_NAME", defaultValue: "${params?.NODE_GROUP_NAME}")
        string(description: "Name of the cluster", name: "CLUSTER_NAME", defaultValue: "${params?.CLUSTER_NAME}")
        string(description: "Token code for MFA login", name: "TOKEN_CODE", defaultValue: "${params?.TOKEN_CODE}")
    }
    stages {
        stage('Login to AWS') {
            sh '''
                    unset AWS_SESSION_TOKEN
                    unset AWS_SECRET_ACCESS_KEY
                    unset AWS_ACCESS_KEY_ID

                    CREDENTIALS=`aws sts get-session-token --serial-number arn:aws:iam::942718799483:mfa/alberto.fernandez --token-code $TOKEN_CODE`

                    export AWS_ACCESS_KEY_ID=`jq -r '.Credentials.AccessKeyId'`
                    export AWS_SECRET_ACCESS_KEY=`jq -r '.Credentials.SecretAccessKey'`
                    export AWS_SESSION_TOKEN=`echo $CREDENTIALS | jq -r '.Credentials.SessionToken'`
                '''
        }
        stage('Scale number of nodes') {
            steps {
                sh 'aws eks --region eu-west-1  update-nodegroup-config --cluster-name ${CLUSTER_NAME} --nodegroup-name ${NODE_GROUP_NAME} --scaling-config minSize=${MIN_SIZE},maxSize=${MAX_SIZE},desiredSize=${DESIRED_SIZE}'                
            }
        }
    }
}