pipeline {
    agent { label 'dev-test' }
    parameters {
        string(description: "Tag to publish the latest version", name: "LATEST_TAG", defaultValue: "${params?.LATEST_TAG}")
        string(description: "Sidecar version", name: "VERSION", defaultValue: "${params?.VERSION}")
    }
    stages {
        stage('Deploy Security Server Sidecar image in AWS EKS environment') {
            steps {
                build job: 'kubernetes-publish-security-server-sidecar',
                parameters: [
                    string(name: 'DEPLOYMENT_PATH', value: 'sidecar/kubernetes/security-server-sidecar-provider.yaml.template'),
                    string(name: 'CLUSTER_NAME', value: 'ss-sidecar-cluster'),
                    string(name: 'XROAD_DB_HOST', value: '127.0.0.1'),
                    string(name: 'XROAD_DB_PORT', value: '5432'),
                    string(name: 'XROAD_DB_PWD', value: 'secret1234'),
                    string(name: 'XROAD_LOG_LEVEL', value: 'OFF'),
                    string(name: 'VOLUME_CLAIM', value: 'sidecar-config-fi-provider-claim'),
                    string(name: 'LATEST_TAG', value: params.LATEST_TAG),
                    string(name: 'VERSION', value: params.VERSION)
                ]
            }
        }
        stage('Rollout status') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'AWS', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    sh 'kubectl rollout status deployment.v1.apps/security-server-sidecar-${VERSION}'
                }
            }
        }
        stage('Test') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'AWS', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    retry (8) {
                        sleep(time: 10, unit: 'SECONDS')
                        script {
                            def response = sh (script: 'curl --write-out %{http_code} --silent --output /dev/null --insecure https://$(kubectl get pods -l run=security-server-sidecar-${VERSION} -o jsonpath={.items[].status.podIP}):4000', returnStdout: true)
                            if (response == '302') {
                                echo '========> Security server sidecar ${LATEST_TAG} is successfully running'
                                currentBuild.result = 'SUCCESS'
                            } else {
                                error("========> Security server sidecar ${LATEST_TAG} returned " + response + " . Try again in 10s")
                            }
                        }
                    }
                }
            }
        }
        stage ('Clean up') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'AWS', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    sh 'kubectl delete deployment.apps/security-server-sidecar-${VERSION}'
                    sh 'kubectl delete service/security-server-sidecar-${VERSION}'
                }
            }
        }
    }
}