pipeline {
    agent { label 'dev-test' }
    stages {
        stage('Check if consumer and provider are deployed in kubernetes') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'AWS', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {  
                    sh 'kubectl rollout status deployment.v1.apps/security-server-sidecar-consumer'
                    sh 'kubectl rollout status deployment.v1.apps/security-server-sidecar-provider'
                }
            }
        }
        stage('Test SOAP inteface') {
            steps {
                retry (5) {
                    sleep(time: 10, unit: 'SECONDS')
                    script {
                        withCredentials([usernamePassword(credentialsId: 'AWS', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {  
                       
                            def response = sh(script: 'curl --write-out %{http_code} --silent --output /dev/null --insecure -d  @sidecar/kubernetes/testRequest.xml --header "Content-Type: text/xml" -X POST  http://$(kubectl get pods -l run=security-server-sidecar-consumer -o jsonpath={.items[].status.podIP})', returnStdout:true)
                                if(response == '200') {
                                    echo '========> Security server is successfully running'
                                    currentBuild.result = 'SUCCESS'
                                } else {
                                    error("========> Security server returned " + response + " . Try again in 10s")
                                }
                        }
                    }
                }
            }
        }
    }
}