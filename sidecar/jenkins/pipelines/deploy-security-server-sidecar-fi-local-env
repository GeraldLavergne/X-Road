pipeline {
    agent { label 'dev-test' }
    parameters {
        string(description: "Tag to publish the latest version", name: "LATEST_TAG", defaultValue: "${params?.LATEST_TAG}")
        string(description: "Sidecar version", name: "VERSION", defaultValue: "${params?.VERSION}")
    }
    environment {
        XROAD_DB_HOST = '127.0.0.1'
        XROAD_DB_PORT = '5432'
        XROAD_DB_PWD = 'secret1234'
        XROAD_LOG_LEVEL = 'OFF'
    }
    stages {
        stage('Deploy Security Server Sidecar image in AWS EKS environment') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'AWS', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    sh 'cat "sidecar/kubernetes/security-server-sidecar-consumer.yaml" | sed "s/{{XROAD_DB_HOST}}/$XROAD_DB_HOST/g" | sed "s/{{XROAD_DB_PORT}}/$XROAD_DB_PORT/g" | sed "s/{{XROAD_DB_PWD}}/$XROAD_DB_PWD/g" | sed "s/{{XROAD_LOG_LEVEL}}/$XROAD_LOG_LEVEL/g" | sed "s/{{VERSION}}/$VERSION/g" | sed "s/{{LATEST_TAG}}/$LATEST_TAG/g" | kubectl apply -f -'
                }
            }
        }
        stage('Rollout status') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'AWS', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    sh 'kubectl rollout status deployment.v1.apps/security-server-sidecar-${VERSION}'
                }
            }
        }
        stage('Test') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'AWS', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    retry (8) {
                        sleep(time: 10, unit: 'SECONDS')
                        script {
                            def response = sh (script: 'curl --write-out %{http_code} --silent --output /dev/null --insecure https://$(kubectl get pods -l run=security-server-sidecar-${VERSION} -o jsonpath={.items[].status.podIP}):4000', returnStdout: true)
                            if (response == '302') {
                                echo '========> Security server sidecar {{LATEST_TAG}} is successfully running'
                                currentBuild.result = 'SUCCESS'
                            } else {
                                error("========> Security server sidecar {{LATEST_TAG}} returned " + response + " . Try again in 10s")
                            }
                        }
                    }
                }
            }
        }
        stage ('Clean up') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'AWS', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    sh 'kubectl delete deployment.apps/security-server-sidecar-${VERSION}'
                    sh 'kubectl delete service/security-server-sidecar-${VERSION}'
                }
            }
        }
    }
}